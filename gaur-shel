#####     SERVICE  COMMANDS
Check if service is Active   I-A/L-U-F
systemctl is-active nginx                                ===o/p=== inactive       
systemctl list-unit-files| grep -i nginx.service         ===o/p=== docker.service          enabled          enabled
                                                         ===o/p=== BLANK message if service not there

List all unit files	include service , socket , mount
- systemctl list-unit-files	                               ----- Lists all available services/units with = ENABLED / DISABLED
- systemctl list-unit-files| grep -i ${service}.service    ----- gives 1 svc-name with = ENABLED / DISABLED
      

- systemctl start/stop/restart/status  nginx
- systemctl enable/disable nginx

# Show failed services	
- systemctl --failed


#######################################################################################################################################
1) CHECK SERVICE ACTIVE OR NOT

#!/bin/bash
service=$1
if systemctl is-active --quiet "$service"        #  its o/p is 0/nonzero , because --quiet convert active/inactive into success/failure
then
  echo "$service is active"
else
  echo "$service is inactive"
fi
---------------------------------------------------


#!/binbash
service=$1
if ! systemctl list-unit-files| grep -i ${service}.service          #
then
echo "${service} not available , please install "
sudo apt-get update -y
sudo apt-get install -y "$service"
fi
---------------------------------------------------



2) check if a file or directory exists

#!/bin/bash

path=$1

if [ -e "$path" ]; then
  echo "$path exists"
else
  echo "$path does not exist"
fi


##########################        SARANSH - GAURAV SHELL         #################################################################################
# VARIABLE

1- var="program"                  ## no space on either side of =
   VAR="hi"                       ## var & VAR have different

unset VAR                        ## remove var

2- $var and ${var}     both are correct to call var value but use ${var} because u can add(cocat) any value to it 
var="program"
echo${var}-ing                     ## 
programing

3- system var  
env                                ## this command show all system var in linux
-----------------------------------------------------------------------------------
4 INPUT

read 
read -p " message as prompt"  varname

#!/bin/bash
read name
read -p "give password " -s password            # -s do not show password while u type it on prompt
echo "my name ${name}"
echo "my pass ${password} "
-----------------------------------------------------------------------------------------------------------------------------------------
VID-7
# create ON NEW LINE             -e "    \n     "
echo -e "1st-word\n 2nd-LATER WORDS"                   ===========
1st-word
2nd-LATER WORDS"                       

# Connect 1st & 2nd line      " 1ST      \    2nd "
echo "1st-word\
2nd-word"     ==================
1st-word2nd-word

<< disclaimer
disclaimer

-----------------------------------------------------------------------------------------------------------------------------------------
vid 10-System Defined Variable 

#!/bin/bash
env          # PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HOME=/home/ubuntu USER=ubuntu
echo ${HOME} # /home/ubuntu
echo $OSTYPE # linux-gnu
echo $PATH   # /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo $$      # 2541 (current shell PID)
echo $PPID   # 2530 (parent process PID)
echo $PWD    # /home/ubuntu/projects
echo $HOSTNAME # ip-172-31-12-34 (EC2 internal hostname)
echo $UID    # 1000 (ubuntu user ID)
UID="5000"   # 
echo $UID    # 5000 (custom override)
-----------------------------------------------------------------------------------------------------------------------------------------

vid-11
read -p "prompt for user" var-name-in-which--user-given-value-stored
read -p "password" -s var         # -s used when password typed by user not show while typing , but show with echo ${var}
-----------------------------------------------------------------------------------------------------------------------------------------

vid-12- Command Line Arguments
#!/bin/bash
name="ram"          # this is 1 argument mean ${1} , this can be overriden by using ./shell.sh shyam 32
age="30"         # this is 2 argument mean ${2}

-sed -i  's/old-value/new-value/g' filenav

-cat>>file1
line1
line2
ctrl+d
-----------------------------------------------------------------------------------------------------------------------------------------

14-ASSIGN COMAND O/P AS VARIABLE = $ ROUND BRACKET-                      
variable1=$(  )                          --declare it by round bracket
echo"${  }"                              -- Call it by curly like how we call any other var

${var} use instaed of $var ,{} help to concat any word  ,myvar must be at left and it value on right ,no space on either side of =          (VAR NOTES)
-----------------------------------------------------------------------------------------------------------------------------------------

15 unset name        /name=      BOTH USED TO UNSET VAR ,  radoMly varname    THIS FIX VALUE OF VAR PERMENENT

read -p "    " -s password                               (INPUT NOTES)
command line args        ${0}=script.sh    ${1} =1st arg 
----------------------------------------------------------------------------------------------------------------------------------------

16 
UPPERCASE     1ST-LETTER  ^               ALL-WORDS     ^^
LOWERCASE     1ST-LETTER   ,               ALL-WORDS    ,,
                ${#var}   == total letters number like 17

echo "${string^}"  /  echo "${string,}"  # Output upper 1st word: my / My   
echo "${string^^}" /  echo "${string,,}" # # Output full: MY NAME IS GAURAV / my name is gaurav
-----------------------------------------------------------------------------------------------------------------------------------------

18 GIVE DEFAULT VALUE TO VAR  === name=${name:-World}              VAR1=${VAR1:-VAR-DEFAULT-VALUE}
-----------------------------------------------------------------------------------------------------------------------------------------
20 ARITHMETIC SYNTAX    
a="$((a+b))"
b="$((5+6))" 
echo "${a} ,${b}"
============
11,11
-----------------------------------------------------------------------------------------------------------------------------------------

21 BASIC FUNCTION SYNTAX

function function-nav(){
command in fuction
}
function-nav  ARG1 ARG2 ARG3 


22  shell basic syntax
#!/bin/bash
variable declare then
function declare then
call function ( if u call function above and write function code below it wont work, function must define before calling)

 23 - How to Pass Arguments to a Functions 
function function-nav(){

echo "${0}"                       ===========shell.sh
echo "${1}"                       ===========ARG1 WITH FUNCTION CALLING CODE
echo "${FUNCNAME} HAS STARTED======CALLING FUNCTION NAME IN FUNCTION CODE TO SEE THAT THIS FUNCTION STARTED FOR CODER RUNNING GET THAT THIS STARTED
}

function-nav   ARG1 ARG2 ARG3            ======================
shell.sh
ARG1
function-nav
-----------------------------------------------------------------------------------------------------------------------------------------
24-How to Create Local Variable in Functions 
#!/bin/bash
# FUNCTION DEFINITION
deploy_app() {
    local app_name=$1                         ### local- used as No side effects on global variables
    local environment=$2                       ### local- used as No side effects on global variables
    
    echo "Deploying $app_name to $environment"            ===== 1 OF BELOW O/P ==== (Deploying payment-service to production)
}
deploy_app "payment-service" "production"
deploy_app "auth-api" "staging"

=======================     O/P  ============================
Deploying payment-service to production
Deploying auth-api to staging


-----------------------------------------------------------------------------------------------------------------------------------------

25 SUCCESS/FAILED
echo $? 
0    / 127    / 1        #PREVIOUS COMMAND SUCCESS=0 OR FAILED=127 OR NOT GET WORD IN FILE=1
-----------------------------------------------------------------------------------------------------------------------------------------

26   
- after if []  means its condition , after if without [] means its command 
if COMMAND          / if [ test ]         #THIS COMMAND/TEST SUCCESS, IT GIVE 0 AS O/P
then                                      #commands after THEN runs only when above if command/ test give 0 means success 
Command 1
command 2 
else                                      #command 3 after ELSE run when above if o/p is non-zero (3/4/5 any1 value) 
command 3
fi
-----------------------------------------------------------------------------------------------------------------------------------------

27  if[] then     elif[] then      else fi
number=5
if [ $number -eq 5 ]         # [ SPACE NEED IN SQUARE BRACKET BEFORE AND AFTER CONDITION SPACE  ]
then
echo "number is eq 5"
elif [ $number -gt 5 ]       # -eq/-ne=equal/not, -gt/lt=greater-than/less , -ge/-le=greater than or equal to / less&equal
then
echo "wrong"
else                          # If neither of the above conditions are true
    echo "The number is greater than 5."
fi


-----------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------

COMMAND LINE ARGS GIVING  =

#!/bin/bash
name=${3}

echo ${0}
echo ${1}
echo ${2}
echo "${name}"
=================
./script.sh hi bi  shy                     =========== 
0           1   2  3
script.sh 
hi 
bi
shy
--------
#!/
echo $1 
.....
echo $11
echo "$11"
.scipt.sh 1 2 .... 10 51 52 53
  0       1 2         11 12 13
========o/p
11      #for $11    == because $11 it considers $11=$1concat1            #########
51      #for ${11}   == so use {} for variable calling                   #########
      
-----------------------------------------------------------------------------------
14 ASSIGN COMAND O/P AS VAR

#!/bin/bash
command=$(date +%D-%T)
echo "${command}"

./script.sh ==========
/home/ubuntu
25/6/2025 10:23:16
----------------------------------------
15 UNSET VAR

name="ram"
readonly name                
name="sham"
unet name
----------------------------------
16
string="my name is Gaurav"

# Capitalize the first letter                                   # Lowercase the first letter
echo "${string^}"  # Output: My name is Gaurav                  echo "${string,}"  # Output: my name is Gaurav

# Capitalize all letters                                        # Lowercase all letters
echo "${string^^}" # Output: MY NAME IS GAURAV                  echo "${string,,}" # Output: my name is gaura

# Get the length of the string
echo "length of string variable is ${#string}" # Output: length of string variable is 17
-----------------------------
echo "$((a+b))"
echo "$((a-b))"
echo "$((a*b))
echo \$ ((a / b)) ^ 2 \#5/6
echo "$((a%b))"
echo s ((2 ^ 3)) ^ prime prime \#2^ * 2^ * 2
((a++))\# a = a + 1
echo $a

--------------------------------
21=FUNCTION ==
- 1 st declare variable then give function as best practice to write shell
- 
function configuration(){
#configurations code
echo "configcodel"
echo "configcode2"
function2-nav                # # THIS IS THE SECOND FUNCTION, WHICH WILL BE CALLED BY THE FIRST ONE.

}
configuration       #THIS CALLS FUNCTION
----------------------------
25 - command sucess / fail

ls 
echo $? 
0 

sadasdasdas
adasdasdas: command not found 
echo $? 
127
---------------------------------------------





































































